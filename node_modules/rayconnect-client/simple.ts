import { EventEmitter } from 'events';

import ReconnectingWebSocket from 'reconnecting-websocket';
let IsNode = (typeof window === 'undefined')
let WS: any = undefined
if (IsNode) {
    WS = require("ws")

}



export default class WebSocketClient {


    private event = new EventEmitter()
    private ws: ReconnectingWebSocket
    private globalInterval: any
    autoReconnectInterval: number;

    constructor(link: any) {
        this.autoReconnectInterval = 10 * 1000;	// ms
        const self = this
        if (IsNode) {


            this.ws = new ReconnectingWebSocket(link, [], {
                WebSocket: WS
            });

        } else {
            this.ws = new ReconnectingWebSocket(link, []);

        }




        this.ws.addEventListener('close', function close(e: any) {


            switch (e.code) {
                case 1000:	// CLOSE_NORMAL
                    break;
                default:	// Abnormal closure
                    break;
            }
            clearInterval(self.globalInterval)
            self.event.emit("disconnect")
        })
        this.ws.onerror = function error(e: any) {
            switch (e.code) {
                case 'ECONNREFUSED':
                    break;
                default:
                    break;
            }

            clearInterval(self.globalInterval)
        }
        this.ws.addEventListener('open', function open() {

            try {
                setInterval(() => {

                    self.send("2");

                    self.globalInterval = setInterval(() => {

                        // self.reconnect('server dont response')
                        clearInterval(self.globalInterval)
                        self.event.emit("disconnect")
                        self.reconnect();


                    }, 30000)
                }, 25000)
            } catch (error) {

            }

        })

        this.ws.addEventListener('message', function incoming(data: any) {

            try {
                if (data.data.startsWith("3")) {
                    clearInterval(self.globalInterval)
                }

                if (data.data.startsWith("2")) {
                    self.send('3')
                }

                if (data.data.startsWith("0")) {
                    const databack = JSON.parse(data.data.substring(1))
                    self.event.emit("APP_INIT", databack)
                }

                if (data.data.startsWith("40")) {

                    self.event.emit("connect", self)
                }
                if (data.data.startsWith("41")) {



                    // reconnect ...
                    setTimeout(() => {
                        self.reconnect()
                    }, 1000);
                    self.event.emit("disconnect")
                    clearInterval(self.globalInterval)
                }
                if (data.data.startsWith("42")) {


                    const databack = JSON.parse(data.data.substring(2))

                    // console.log("name :", data[0])
                    self.event.emit(databack[0], databack[1])

                }
            } catch (error) {

            }

        })











    }



    public reconnect() {
        clearInterval(this.globalInterval)
        this.ws.reconnect()
    }
    private send(st: any) {
        if (this.ws.readyState == 1) {
            this.ws.send(st);
        }
    }


    public emit(name: any, data: any) {
        if (this.ws.readyState == 1) {
            try {

                this.send(`42["${name}", ${JSON.stringify(data)}]`);
            } catch (e) { }
            return
        }
        const inter = setInterval(() => {
            try {
                if (this.ws.readyState != 0) {

                    this.send(`42["${name}", ${JSON.stringify(data)}]`);
                    clearInterval(inter)

                }



            } catch (e) { }
        }, 10);


    }

    public on(event: string | symbol, listner: (...args: any[]) => void) {
        return this.event.on(event, listner)
    }
    public once(event: string | symbol, listner: (...args: any[]) => void) {
        return this.event.once(event, listner)
    }

    public off(event: string | symbol, listner: (...args: any[]) => void) {
        return this.event.off(event, listner)
    }

    public close() {
        return this.ws.close()
    }
    public readData(event: string | symbol, listner: (...args: any[]) => void) {
        const self = this;
        return this.event.once(event, (arg)=>{
            listner(arg)
            return this.event.off(event, listner)

            
        })
    }
    

}
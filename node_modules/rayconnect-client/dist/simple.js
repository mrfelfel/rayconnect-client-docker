"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var reconnecting_websocket_1 = __importDefault(require("reconnecting-websocket"));
var IsNode = (typeof window === 'undefined');
var WS = undefined;
if (IsNode) {
    WS = require("ws");
}
var WebSocketClient = /** @class */ (function () {
    function WebSocketClient(link) {
        this.event = new events_1.EventEmitter();
        this.autoReconnectInterval = 10 * 1000; // ms
        var self = this;
        if (IsNode) {
            this.ws = new reconnecting_websocket_1.default(link, [], {
                WebSocket: WS
            });
        }
        else {
            this.ws = new reconnecting_websocket_1.default(link, []);
        }
        this.ws.addEventListener('close', function close(e) {
            switch (e.code) {
                case 1000: // CLOSE_NORMAL
                    break;
                default: // Abnormal closure
                    break;
            }
            clearInterval(self.globalInterval);
            self.event.emit("disconnect");
        });
        this.ws.onerror = function error(e) {
            switch (e.code) {
                case 'ECONNREFUSED':
                    break;
                default:
                    break;
            }
            clearInterval(self.globalInterval);
        };
        this.ws.addEventListener('open', function open() {
            try {
                setInterval(function () {
                    self.send("2");
                    self.globalInterval = setInterval(function () {
                        // self.reconnect('server dont response')
                        clearInterval(self.globalInterval);
                        self.event.emit("disconnect");
                        self.reconnect();
                    }, 30000);
                }, 25000);
            }
            catch (error) {
            }
        });
        this.ws.addEventListener('message', function incoming(data) {
            try {
                if (data.data.startsWith("3")) {
                    clearInterval(self.globalInterval);
                }
                if (data.data.startsWith("2")) {
                    self.send('3');
                }
                if (data.data.startsWith("0")) {
                    var databack = JSON.parse(data.data.substring(1));
                    self.event.emit("APP_INIT", databack);
                }
                if (data.data.startsWith("40")) {
                    self.event.emit("connect", self);
                }
                if (data.data.startsWith("41")) {
                    // reconnect ...
                    setTimeout(function () {
                        self.reconnect();
                    }, 1000);
                    self.event.emit("disconnect");
                    clearInterval(self.globalInterval);
                }
                if (data.data.startsWith("42")) {
                    var databack = JSON.parse(data.data.substring(2));
                    // console.log("name :", data[0])
                    self.event.emit(databack[0], databack[1]);
                }
            }
            catch (error) {
            }
        });
    }
    WebSocketClient.prototype.reconnect = function () {
        clearInterval(this.globalInterval);
        this.ws.reconnect();
    };
    WebSocketClient.prototype.send = function (st) {
        if (this.ws.readyState == 1) {
            this.ws.send(st);
        }
    };
    WebSocketClient.prototype.emit = function (name, data) {
        var _this = this;
        if (this.ws.readyState == 1) {
            try {
                this.send("42[\"" + name + "\", " + JSON.stringify(data) + "]");
            }
            catch (e) { }
            return;
        }
        var inter = setInterval(function () {
            try {
                if (_this.ws.readyState != 0) {
                    _this.send("42[\"" + name + "\", " + JSON.stringify(data) + "]");
                    clearInterval(inter);
                }
            }
            catch (e) { }
        }, 10);
    };
    WebSocketClient.prototype.on = function (event, listner) {
        return this.event.on(event, listner);
    };
    WebSocketClient.prototype.once = function (event, listner) {
        return this.event.once(event, listner);
    };
    WebSocketClient.prototype.off = function (event, listner) {
        return this.event.off(event, listner);
    };
    WebSocketClient.prototype.close = function () {
        return this.ws.close();
    };
    WebSocketClient.prototype.readData = function (event, listner) {
        var _this = this;
        var self = this;
        return this.event.once(event, function (arg) {
            listner(arg);
            return _this.event.off(event, listner);
        });
    };
    return WebSocketClient;
}());
exports.default = WebSocketClient;

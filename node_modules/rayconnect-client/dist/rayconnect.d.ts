/// <reference types="node" />
import SimpleConnect from './simple';
import { EventEmitter } from 'events';
interface Permission {
    mode: string;
    uid: string;
    scope: string;
    method: string;
    address: string;
}
interface Options {
    scopes: string;
    appID: string;
    space: string;
    type: string;
    url?: string;
    unsecure?: boolean;
}
interface ServerData {
    sender: string;
    token: string;
    data: any;
    date: any;
    send?: Function;
}
interface QueryType {
    scope: string;
    address: string;
    method: string;
}
interface Cloudstorage {
    Keys: Map<string, string>;
    setItem: Function;
    getItem: Function;
}
interface ExecuteType {
    scope: string;
    uniqueID: string;
    TokenID: string;
    address: string;
    info: {
        method: string;
        data: any;
    };
}
interface QueryCallback {
    (ServerData: ServerData, Query: QueryType): void;
}
declare class Rayconnect {
    private ops;
    private token;
    private config;
    authed: boolean;
    user: any;
    AuthEvent: EventEmitter;
    InterTime: number;
    Timeout: number;
    loginData: {
        username: string;
        password: string;
    };
    encode: boolean;
    socket: SimpleConnect;
    private InitCloud;
    middlewares: Function[];
    CloudStorage: Cloudstorage;
    constructor(ops: Options, token: any, config: any);
    setProfile(data: any, TimeOutNumber?: number): Promise<unknown>;
    CloneCloudStorage(token: string, TimeOutNumber?: number): Promise<unknown>;
    SetCloudStorage(data: any, TimeOutNumber?: number): Promise<unknown>;
    LoadCloudStorage(TimeOutNumber?: number): Promise<unknown>;
    AuthEmitter(authed: any): void;
    AuthChecker(callback: {
        (arg0: boolean): void;
        (arg0: boolean): void;
    }): void;
    Ack(data: any): void;
    ObjectIdvalue: (id: {
        id: {
            toString: () => void;
        };
    }) => void;
    OnConnect(callback: {
        (): void;
        (): void;
    }): void;
    RequestOTP(phone: any, TimeOutNumber?: number): Promise<unknown>;
    VerifyPhone(phone: any, token: any, TimeOutNumber?: number): Promise<unknown>;
    GetGuestAccess(): Promise<any>;
    Guest(TimeOutNumber?: number): any;
    LoginWithPassword(data?: {
        username: string;
        password: string;
    }, TimeOutNumber?: number): Promise<unknown>;
    LoginEvent(callback: (arg0: any) => void): void;
    DisOnConnect(callback: {
        (): void;
        (): void;
    }): void;
    AuthOnConnect(token: any): void;
    Auth(token: any): any;
    onAuth(input: string, input2: any): void;
    NoAuthed(callback: (arg0: boolean) => void): void;
    Reconnect(): void;
    Connect(): SimpleConnect;
    execQuery(param: ExecuteType): void;
    News(callback: (arg0: any) => void): void;
    Request(execObj: ExecuteType, queryObj: QueryType, TimeOutNumber?: number): Promise<unknown>;
    RequestBack(execObj: ExecuteType, TimeOutNumber?: number): Promise<unknown>;
    Query(queryObj: QueryType, callback: QueryCallback): void;
    addUser(param: any): Promise<unknown>;
    changePermissions(param: Permission): Promise<unknown>;
    private AcceptChangePermissionRequest;
    private RejectChangePermissionRequest;
    updatePassword(param: any): Promise<unknown>;
    use(fn: Function): void;
    executeMiddleware(middlewares: Function[], data: any, next: Function): void;
    Dpack(msg: any): any;
}
export default Rayconnect;

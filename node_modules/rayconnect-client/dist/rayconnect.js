"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var simple_1 = __importDefault(require("./simple"));
var events_1 = require("events");
var Rayconnect = /** @class */ (function () {
    function Rayconnect(ops, token, config) {
        var _this = this;
        if (ops === void 0) { ops = {
            scopes: '',
            appID: 'rayconnect',
            space: '',
            type: 'client',
        }; }
        this.ops = ops;
        this.token = token;
        this.config = config;
        this.authed = false;
        this.AuthEvent = new events_1.EventEmitter();
        this.InterTime = 10;
        this.Timeout = 3000;
        this.loginData = { username: '', password: '' };
        this.encode = true;
        this.InitCloud = false;
        this.middlewares = [];
        this.ObjectIdvalue = function (id) {
            return id.id.toString();
        };
        if (!this.ops.url) {
            this.ops.url = 'server-test.rayconnect.ir/socket.io/';
        }
        console.log(this.ops);
        var self = this;
        this.CloudStorage = {
            Keys: new Map(),
            setItem: function (key, value) {
                return self.SetCloudStorage({
                    key: key,
                    value: value
                });
            },
            getItem: function (key) {
                return new Promise(function (resolve, reject) {
                    if (self.InitCloud) {
                        resolve(self.CloudStorage.Keys.get(key));
                    }
                    setTimeout(function () {
                        reject("request timeout");
                    }, 2000);
                    var interTime = 20;
                    var interval = setInterval(function () {
                        if (self.InitCloud) {
                            resolve(self.CloudStorage.Keys.get(key));
                            clearInterval(interval);
                        }
                        interTime *= 2;
                    }, interTime);
                });
            }
        };
        this.socket = this.Connect();
        this.OnConnect(function () {
        });
        this.socket.on("app_data", function (data) {
            if (data.encode == false) {
                _this.encode = data.encode;
            }
        });
        this.socket.on('authed', function (msg) {
            var data = _this.Dpack(msg);
            _this.authed = true;
            _this.user = data.data;
            _this.AuthEvent.emit('authed', true);
        });
        this.socket.on('ack_gram', function (msg) {
            var data = _this.Dpack(msg);
            // console.info(data)
        });
        this.DisOnConnect(function () {
            _this.authed = false;
            // this.AuthEvent.
        });
    }
    Rayconnect.prototype.setProfile = function (data, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 6000; }
        return new Promise(function (resolve, rejects) {
            _this.socket.emit('profile', {
                method: 'SET',
                data: data
            });
            var TimeOut = setTimeout(function () {
                rejects("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('profile_set', function (back) {
                resolve(back);
                clearTimeout(TimeOut);
            });
        });
    };
    Rayconnect.prototype.CloneCloudStorage = function (token, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        return new Promise(function (resolve, rejects) {
            _this.socket.emit('cloud_storage', {
                method: 'CLONE',
                data: token
            });
            var TimeOut = setTimeout(function () {
                rejects("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('cloud_storage_cloned', function (back) {
                resolve(back);
                clearTimeout(TimeOut);
            });
        });
    };
    Rayconnect.prototype.SetCloudStorage = function (data, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        return new Promise(function (resolve, rejects) {
            if (['setItem', 'getItem', 'removeItem', 'clear'].includes(data.key)) {
                return rejects('can not use reserved function as data');
            }
            _this.socket.emit('cloud_storage', {
                method: 'SET',
                data: data
            });
            var TimeOut = setTimeout(function () {
                rejects("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('cloud_storage_set_' + data.key, function (back) {
                _this.CloudStorage.Keys.set(data.key, data.value);
                resolve(back);
                clearTimeout(TimeOut);
            });
        });
    };
    Rayconnect.prototype.LoadCloudStorage = function (TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        return new Promise(function (resolve, rejects) {
            _this.socket.emit('cloud_storage', {
                method: 'LOAD'
            });
            var TimeOut = setTimeout(function () {
                rejects("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('cloud_storage_load', function (data) {
                resolve(_this.CloudStorage);
                _this.InitCloud = true;
                clearTimeout(TimeOut);
                data.forEach(function (element) {
                    if (!['setItem', 'getItem', 'removeItem', 'clear'].includes(element.key)) {
                        _this.CloudStorage.Keys.set(element.key, element.value);
                    }
                });
            });
        });
    };
    Rayconnect.prototype.AuthEmitter = function (authed) {
        if (authed) {
            this.AuthEvent.emit('authed', true);
        }
    };
    Rayconnect.prototype.AuthChecker = function (callback) {
        var _this = this;
        var interval = setInterval(function () {
            if (_this.authed) {
                callback(_this.authed);
                clearInterval(interval);
            }
        }, 50);
        setTimeout(function () {
            callback(_this.authed);
            clearInterval(interval);
        }, 3000);
    };
    Rayconnect.prototype.Ack = function (data) {
        this.socket.emit('ack_gram', {
            reqID: data
        });
    };
    Rayconnect.prototype.OnConnect = function (callback) {
        this.socket.on('connect', function () {
            callback();
        });
    };
    Rayconnect.prototype.RequestOTP = function (phone, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 120000; }
        this.socket.emit('login', { phone: phone });
        return new Promise(function (resolve, reject) {
            var TimeOut = setTimeout(function () {
                reject("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('login', function (msg) {
                var data = _this.Dpack(msg);
                clearTimeout(TimeOut);
                resolve(data);
            });
        });
    };
    Rayconnect.prototype.VerifyPhone = function (phone, token, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 120000; }
        this.socket.emit('login', { phone: phone, token: token });
        return new Promise(function (resolve, reject) {
            var TimeOut = setTimeout(function () {
                reject("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('login', function (msg) {
                var data = _this.Dpack(msg);
                clearTimeout(TimeOut);
                resolve(data);
            });
        });
    };
    Rayconnect.prototype.GetGuestAccess = function () {
        return __awaiter(this, void 0, void 0, function () {
            var guest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.Guest()];
                    case 1:
                        guest = _a.sent();
                        return [2 /*return*/, this.Auth(guest['data']['token'])];
                }
            });
        });
    };
    Rayconnect.prototype.Guest = function (TimeOutNumber) {
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        return this.LoginWithPassword();
    };
    Rayconnect.prototype.LoginWithPassword = function (data, TimeOutNumber) {
        var _this = this;
        if (data === void 0) { data = { username: 'guest', password: 'guest' }; }
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        this.loginData = data;
        this.socket.emit('loginup', data);
        return new Promise(function (resolve, reject) {
            var TimeOut = setTimeout(function () {
                reject("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.socket.readData('login', function (msg) {
                var data = _this.Dpack(msg);
                clearTimeout(TimeOut);
                resolve(data);
            });
        });
    };
    Rayconnect.prototype.LoginEvent = function (callback) {
        var _this = this;
        this.socket.on('login', function (msg) {
            var data = _this.Dpack(msg);
            callback(data);
        });
    };
    Rayconnect.prototype.DisOnConnect = function (callback) {
        this.socket.on('disconnect', function () {
            callback();
        });
    };
    Rayconnect.prototype.AuthOnConnect = function (token) {
        var _this = this;
        this.socket.on('connect', function () {
            _this.Auth(token);
        });
    };
    Rayconnect.prototype.Auth = function (token) {
        var _this = this;
        this.socket.emit("auth", {
            token: token
        });
        return new Promise(function (resolve, reject) {
            var timeout = setTimeout(function () {
                reject("request timeout.");
            }, 5000);
            _this.AuthEvent.once('authed', function () {
                // load cloud storage when authed
                _this.LoadCloudStorage()
                    .then(function (data) {
                    resolve(_this.user);
                });
                clearTimeout(timeout);
            });
        });
    };
    Rayconnect.prototype.onAuth = function (input, input2) {
        var _this = this;
        // Auth(localStorage.token)
        var callback;
        var timer = this.Timeout;
        var renable = false;
        if (typeof input == 'function') {
            callback = input;
        }
        else {
            if (input !== 'checker') {
                this.Auth(input);
            }
            if (input == 'checker') {
                timer = timer * 10000;
                renable = true;
            }
            callback = input2;
        }
        if (renable) {
            callback(false);
        }
        var ins = setInterval(function () {
            if (_this.authed) {
                callback(true);
                clearInterval(ins);
            }
        }, 10);
        var timeout = setTimeout(function () {
            if (!_this.authed) {
                callback(false);
                clearInterval(ins);
            }
        }, timer);
        this.socket.on('no_authed', function () {
            clearTimeout(timeout);
            clearInterval(ins);
            callback(false);
        });
    };
    Rayconnect.prototype.NoAuthed = function (callback) {
        this.socket.on('no_authed', function () {
            callback(false);
        });
    };
    Rayconnect.prototype.Reconnect = function () {
        this.socket.reconnect();
    };
    Rayconnect.prototype.Connect = function () {
        var wsProtocol = "" + (this.ops.unsecure ? 'ws://' : 'wss://');
        var connectionString = "" + wsProtocol + this.ops.url + "?scopes=chat&appID=rayGap&space=chat&type=client&encode=true&EIO=3&transport=websocket";
        if (this.config) {
            connectionString = "" + wsProtocol + this.ops.url + "?scopes=" + this.ops.scopes + "&appID=" + this.ops.appID + "&space=" + this.ops.space + "&type=" + this.ops.type + "&encode=" + this.encode + "&EIO=3&transport=websocket";
            if (this.token) {
                connectionString += "&token=" + this.token;
            }
        }
        else {
            connectionString += "?token=" + this.token;
        }
        this.authed = false;
        this.user;
        return this.socket = new simple_1.default(connectionString);
    };
    Rayconnect.prototype.execQuery = function (param) {
        param.info.data = JSON.stringify(param.info.data);
        this.socket.emit("exec_gram", param);
    };
    Rayconnect.prototype.News = function (callback) {
        var _this = this;
        this.socket.on('news', function (msg) { return __awaiter(_this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                this.Dpack(msg);
                data = this.Dpack(msg);
                callback(data);
                return [2 /*return*/];
            });
        }); });
    };
    Rayconnect.prototype.Request = function (execObj, queryObj, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        return new Promise(function (resolve, reject) {
            if (!_this.authed) {
                return reject("not authed");
            }
            var TimeOut = setTimeout(function () {
                reject("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.execQuery(execObj);
            _this.socket.readData('blocked', function () {
                reject("blocked ");
                clearTimeout(TimeOut);
            });
            _this.socket.readData("exec_gram_" + queryObj.address, function (msg) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.executeMiddleware(this.middlewares, {
                        query: queryObj,
                        exec: execObj,
                        msg: msg
                    }, function (info, next) {
                        try {
                            var data_1 = _this.Dpack(msg);
                            if ((data_1.scope === queryObj.scope) && (data_1.address === queryObj.address) && (data_1
                                .info
                                .method === queryObj.method)) {
                                // send ack
                                _this.Ack(data_1.info.reqID);
                                // callback
                                clearTimeout(TimeOut);
                                var send = function (sendData, token) {
                                    _this.execQuery({
                                        scope: queryObj.scope,
                                        uniqueID: token ? '*' : data_1.sender,
                                        TokenID: token ? data_1.token : '*',
                                        address: queryObj.address + "/back",
                                        info: {
                                            method: queryObj.method,
                                            data: sendData
                                        }
                                    });
                                };
                                var resolvedata = {
                                    sender: data_1.uid,
                                    token: data_1.token,
                                    data: JSON.parse(data_1.info.data),
                                    date: data_1.info.date,
                                    send: send
                                };
                                resolve(resolvedata);
                            }
                        }
                        catch (error) {
                            reject(error);
                        }
                    });
                    return [2 /*return*/];
                });
            }); });
        });
    };
    Rayconnect.prototype.RequestBack = function (execObj, TimeOutNumber) {
        var _this = this;
        if (TimeOutNumber === void 0) { TimeOutNumber = 3000; }
        // make query object from exec
        var queryObj = {
            scope: execObj.scope,
            address: execObj.address + "/back",
            method: execObj.info.method
        };
        return new Promise(function (resolve, reject) {
            if (!_this.authed) {
                return reject("not authed");
            }
            var TimeOut = setTimeout(function () {
                reject("request timeout : " + TimeOutNumber);
            }, TimeOutNumber);
            _this.execQuery(execObj);
            _this.socket.readData('blocked', function () {
                reject("blocked ");
                clearTimeout(TimeOut);
            });
            _this.socket.readData("exec_gram_" + queryObj.address, function (msg) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.executeMiddleware(this.middlewares, {
                        query: queryObj,
                        exec: execObj,
                        msg: msg
                    }, function (info, next) {
                        try {
                            var data_2 = _this.Dpack(msg);
                            if ((data_2.scope === queryObj.scope) && (data_2.address === queryObj.address) && (data_2
                                .info
                                .method === queryObj.method)) {
                                // send ack
                                _this.Ack(data_2.info.reqID);
                                // callback
                                clearTimeout(TimeOut);
                                var send = function (sendData, token) {
                                    _this.execQuery({
                                        scope: queryObj.scope,
                                        uniqueID: token ? '*' : data_2.sender,
                                        TokenID: token ? data_2.token : '*',
                                        address: queryObj.address + "/back",
                                        info: {
                                            method: queryObj.method,
                                            data: sendData
                                        }
                                    });
                                };
                                var resolvedata = {
                                    sender: data_2.uid,
                                    token: data_2.token,
                                    data: JSON.parse(data_2.info.data),
                                    date: data_2.info.date,
                                    send: send
                                };
                                resolve(resolvedata);
                            }
                        }
                        catch (error) {
                            reject(error);
                        }
                    });
                    return [2 /*return*/];
                });
            }); });
        });
    };
    Rayconnect.prototype.Query = function (queryObj, callback) {
        var _this = this;
        if (!this.authed) {
            console.error('cannot exec without auth');
            return;
        }
        this.socket.on("exec_gram_" + queryObj.address, function (msg) { return __awaiter(_this, void 0, void 0, function () {
            var data_3, send_1;
            var _this = this;
            return __generator(this, function (_a) {
                try {
                    data_3 = this.Dpack(msg);
                    if ((data_3.scope === queryObj.scope) && (data_3.address === queryObj.address) && (data_3
                        .info
                        .method === queryObj.method)) {
                        // send ack
                        this.Ack(data_3.info.reqID);
                        send_1 = function (sendData, token) {
                            _this.execQuery({
                                scope: queryObj.scope,
                                uniqueID: token ? '*' : data_3.sender,
                                TokenID: token ? data_3.token : '*',
                                address: queryObj.address + "/back",
                                info: {
                                    method: queryObj.method,
                                    data: sendData
                                }
                            });
                        };
                        this.executeMiddleware(this.middlewares, {
                            query: queryObj,
                            msg: msg,
                            send: send_1
                        }, function (info, next) {
                            callback({
                                sender: data_3.uid,
                                token: data_3.token,
                                data: JSON.parse(data_3.info.data),
                                date: data_3.info.date,
                                send: send_1,
                            }, queryObj);
                        });
                        // callback
                    }
                }
                catch (error) {
                    console.error(error);
                }
                return [2 /*return*/];
            });
        }); });
    };
    Rayconnect.prototype.addUser = function (param) {
        var self = this;
        return new Promise(function (resolve, reject) {
            self.socket.emit("add_user", param);
            var c = setTimeout(function () {
                reject('not answer');
            }, 3000);
            self.socket.on("added_user", function (msg) {
                var data = self.Dpack(msg);
                clearTimeout(c);
                resolve(data);
            });
        });
    };
    Rayconnect.prototype.changePermissions = function (param) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve, reject) {
            self.socket.emit("change_permissions", param);
            var c = _this.RejectChangePermissionRequest(reject);
            _this.AcceptChangePermissionRequest(self, c, resolve);
        });
    };
    Rayconnect.prototype.AcceptChangePermissionRequest = function (self, c, resolve) {
        self.socket.readData("changed_permission", function (msg) {
            clearTimeout(c);
            resolve(msg);
        });
    };
    Rayconnect.prototype.RejectChangePermissionRequest = function (reject) {
        return setTimeout(function () {
            reject('not answer');
        }, 3000);
    };
    Rayconnect.prototype.updatePassword = function (param) {
        var self = this;
        return new Promise(function (resolve, reject) {
            self.socket.emit("update_password", param);
            var c = setTimeout(function () {
                reject('not answer');
            }, 3000);
            self.socket.on("updated_password", function (msg) {
                var data = self.Dpack(msg);
                clearTimeout(c);
                resolve(data);
            });
        });
    };
    Rayconnect.prototype.use = function (fn) {
        this.middlewares.push(fn);
    };
    Rayconnect.prototype.executeMiddleware = function (middlewares, data, next) {
        var composition = middlewares.reduceRight(function (next, fn) { return function (v) {
            // collect next data
            var info = data;
            fn(info, next);
        }; }, next);
        composition(data);
    };
    Rayconnect.prototype.Dpack = function (msg) {
        return msg;
    };
    return Rayconnect;
}());
exports.default = Rayconnect;
